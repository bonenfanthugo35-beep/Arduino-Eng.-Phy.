const int IN1 = 8; // Direction pin 1 (left)
const int IN2 = 7; // Direction pin 2 (left)
const int IN3 = 6; // Direction pin 3 (right)
const int IN4 = 5; // Direction pin 4 (right)
const int ENA = 3; // PWM (left)
const int ENB = 9; // PWM (right)
const int trigPin = 13;
const int echoPin = 12;

// Calibration
float scaleLeft  = 1.00;
float scaleRight = 1.258064;   // ≈1.26

int clampPWM(int v){ if(v<0) v=0; if(v>255) v=255; return v; }

// Moves the motor one (left)
void directionMoveOne(int in1, int in2, int ena, int speed) {
  if (speed > 0) {
    digitalWrite(in1, LOW);
    digitalWrite(in2, HIGH);
    analogWrite(ena, clampPWM(speed));

  } else if (speed < 0) {
    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
    analogWrite(ena, clampPWM(-speed));

  } else {
    digitalWrite(in1, LOW);
    digitalWrite(in2, LOW);
    analogWrite(ena, 0); // full stop
  }
}

// Moves the motor two (right)
void directionMoveTwo(int in3, int in4, int enb, int speed) {
  if (speed > 0) {
    digitalWrite(in3, LOW);
    digitalWrite(in4, HIGH);
    analogWrite(enb, clampPWM(speed));
  } else if (speed < 0) {
    digitalWrite(in3, HIGH);
    digitalWrite(in4, LOW);
    analogWrite(enb, clampPWM(-speed));
  } else {
    digitalWrite(in3, LOW);
    digitalWrite(in4, LOW);
    analogWrite(enb, 0); // full stop
  }
}

// Apply calibration, makes motor move
void move(int motorOneMove, int motorTwoMove) {
  motorOneMove = (int)(motorOneMove * scaleLeft);
  motorTwoMove = (int)(motorTwoMove * scaleRight);
  directionMoveOne(IN1, IN2, ENA, motorOneMove);
  directionMoveTwo(IN3, IN4, ENB, motorTwoMove);
}

void turnRight(){
  move(-190, 239);  // pivot: left back, right forward
  delay(500);
  move(0,0);
}

void turnLeft(){
  move(190, -239);  // pivot: left fwd, right back
  delay(500);
  move(0,0);
}

void setup() {
  Serial.begin(9600);
  pinMode (IN1, OUTPUT);
  pinMode (IN2, OUTPUT);
  pinMode (IN3, OUTPUT);
  pinMode (IN4, OUTPUT);
  pinMode (ENA, OUTPUT);
  pinMode (ENB, OUTPUT);
  pinMode (trigPin, OUTPUT);
  pinMode (echoPin, INPUT);
  digitalWrite(trigPin, LOW);
}

//move(206, 222);
//delay(3000);
//move(0, 0);
//delay(3000);
//turnRight();
//delay(3000);


//Original code that determined the direction and speed
//analogWrite(ENA,206);
//analogWrite(ENB,222);
//digitalWrite(IN1, LOW);
//digitalWrite(IN2, HIGH);
//digitalWrite(IN3, LOW);
//digitalWrite(IN4, HIGH);

void loop(){
  long duration;
  int distance;

  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  duration = pulseIn(echoPin, HIGH, 25000UL);
  if (duration == 0) {
    distance = 999;           // treat as very far
  } else {
    distance = duration / 58; // cm
  }

  Serial.println(distance);
  delay(50);

if (distance < 35) {
  // too close to the wall → turn right a bit
  if (distance < 25){
    move(150, 200);
  }
    else{
      move(220, 150);
    }
}
else if (distance > 55 && distance < 120) {
  // too far from the wall → turn left a bit
  move(220, 150);
  delay(2000);
  move(150,200);
}
else if (distance >= 35 && distance <= 55) {
  // good distance → go straight
  move(252, 200);
}
else {
  // no wall detected → stop
  move(0, 0);
}
  }
